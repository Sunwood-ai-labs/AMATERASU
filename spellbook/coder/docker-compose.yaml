version: "3.9"
services:
  coder:
    image: ghcr.io/coder/coder:${CODER_VERSION:-latest}
    group_add:
      - "999"
    ports:
      - "${CODER_HOST:-0.0.0.0}:${CODER_PORT:-7080}:7080"
    environment:
      CODER_PG_CONNECTION_URL: "postgresql://${POSTGRES_USER:-username}:${POSTGRES_PASSWORD:-password}@database/${POSTGRES_DB:-coder}?sslmode=disable"
      CODER_HTTP_ADDRESS: "0.0.0.0:7080"
      # ACCESS_URLをホスト名とポートで制御
      CODER_ACCESS_URL: "http://${CODER_HOSTNAME:-localhost}:${CODER_PORT:-7080}"
      CODER_TUNNEL_DISABLE: "${CODER_TUNNEL_DISABLE:-true}"
      CODER_DEV_MODE: "${CODER_DEV_MODE:-true}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - coder_home:/home/coder
    depends_on:
      database:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    mem_limit: ${CODER_MEMORY_LIMIT:-8g}

  database:
    image: "postgres:16"
    ports:
      - "${POSTGRES_HOST:-127.0.0.1}:${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-username}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-coder}
    volumes:
      - coder_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-username} -d ${POSTGRES_DB:-coder}"]
      interval: 5s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    mem_limit: ${POSTGRES_MEMORY_LIMIT:-1g}

volumes:
  coder_data:
  coder_home:
