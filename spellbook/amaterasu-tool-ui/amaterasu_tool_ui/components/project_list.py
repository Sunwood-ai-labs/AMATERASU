"""
„Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ßË°®Á§∫„ÅÆUI„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÇíÊèê‰æõ„Åô„Çã„É¢„Ç∏„É•„Éº„É´
"""
import gradio as gr
from typing import List, Dict, Any, Callable

def show_project_list(
    projects: List[Any],  # TerraformProject„ÅÆ„É™„Çπ„Éà
    on_select: Callable[[List[str]], None]
) -> gr.Blocks:
    """
    „Éó„É≠„Ç∏„Çß„ÇØ„Éà‰∏ÄË¶ß„ÇíË°®Á§∫„Åô„Çã„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà

    Args:
        projects (List[Any]): TerraformProject„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆ„É™„Çπ„Éà
        on_select (Callable[[List[str]], None]): „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏ÊäûÊôÇ„ÅÆ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØ

    Returns:
        gr.Blocks: Gradio„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
    """
    with gr.Blocks() as project_list:
        gr.Markdown("## üìÇ Ê§úÂá∫„Åï„Çå„Åü„Éó„É≠„Ç∏„Çß„ÇØ„Éà")
        
        if not projects:
            gr.Warning("‚ö†Ô∏è ÂØæË±°„Å®„Å™„Çã„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü")
            return project_list
        
        gr.Markdown(f"ÂêàË®à {len(projects)} ÂÄã„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü")
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏Êäû„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ
        project_checkboxes = []
        for project in projects:
            with gr.Row():
                checkbox = gr.Checkbox(
                    label=project["name"],
                    value=False,
                    info=f"„Ç§„É≥„Éï„É©ÂÆöÁæ©: {project.get('infrastructure_dir', 'N/A')}"
                )
                project_checkboxes.append(checkbox)
                
                with gr.Column():
                    if hasattr(project, 'main_tfvars_path') and project.main_tfvars_path:
                        gr.Markdown("##### üîß Main Infrastructure")
                        gr.Code(project.main_tfvars_path, language="bash")
                    
                    if hasattr(project, 'cloudfront_tfvars_path') and project.cloudfront_tfvars_path:
                        gr.Markdown("##### üåê CloudFront Infrastructure")
                        gr.Code(project.cloudfront_tfvars_path, language="bash")
        
        # ÂÖ®ÈÅ∏Êäû/Ëß£Èô§„Éú„Çø„É≥
        with gr.Row():
            select_all = gr.Button("üîò ÂÖ®„Å¶ÈÅ∏Êäû", variant="secondary")
            clear_all = gr.Button("‚≠ï ÂÖ®„Å¶Ëß£Èô§", variant="secondary")
        
        def update_all_checkboxes(value: bool) -> List[bool]:
            return [value] * len(project_checkboxes)
        
        select_all.click(
            fn=lambda: update_all_checkboxes(True),
            outputs=project_checkboxes
        )
        
        clear_all.click(
            fn=lambda: update_all_checkboxes(False),
            outputs=project_checkboxes
        )
        
        # „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÈÅ∏Êäû„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
        def on_selection_change(*values):
            selected_projects = [
                project.name
                for project, selected in zip(projects, values)
                if selected
            ]
            on_select(selected_projects)
        
        for checkbox in project_checkboxes:
            checkbox.change(
                fn=on_selection_change,
                inputs=project_checkboxes,
                outputs=None
            )
    
    return project_list
